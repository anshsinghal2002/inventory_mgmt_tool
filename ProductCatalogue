"""
A catalogue that stores all the products and their details. Any item added to the inventory will only store a product id, and information regarding the product will require a lookup through a given catalogue.
"""
class ProductCatalogue:

    def __init__(self):
        """
        Initialize a new product catalogue.
        """
        self.products = {}

    def add_product_type(self, product_type):
        """
        Add a product type to the catalogue.

        Args:
        product_type (ProductType): The product type to add.
        """
        self.products[product_type.productID] = product_type

    def lookup(self, productID):
        """
        Look up a product type by its product ID.

        Args:
        productID (str): The product ID to look up.

        Returns:
        ProductType: The product type associated with the provided ID.
        """
        return self.products.get(productID, None)
    
    def get_best_before_days(self,productID):
        """
        Get the best before days for a specific product type by its product ID.

        Args:
        productID (str): The product ID to look up.

        Returns:
        int: The best before days for the product, if available.
        """

        return self.lookup(productID).bestBeforeDays
    
    def list_all_products(self):
        """
        List all product types in the catalogue.
        Returns:
        list: A list of product IDs and names.
        """
        return [(product.productID, product.productName) for product in self.products.values()]

    def remove_product_type(self, productID):
        """
        Remove a product type from the catalogue.
        Args:
        productID (str): The product ID to remove.
        """
        if productID in self.products:
            del self.products[productID]

    def update_product_type(self, productID, **updates):
        """
        Update details for an existing product type.
        Args:
        productID (str): The product ID to update.
        updates (dict): A dictionary of attributes to update.
        """
        if productID in self.products:
            product = self.products[productID]
            for key, value in updates.items():
                setattr(product, key, value)